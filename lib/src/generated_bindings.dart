// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to Wren, the scripting language and its vm
class WrenBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WrenBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WrenBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int wrenGetVersionNumber() {
    return _wrenGetVersionNumber();
  }

  late final _wrenGetVersionNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('wrenGetVersionNumber');
  late final _wrenGetVersionNumber =
      _wrenGetVersionNumberPtr.asFunction<int Function()>();

  void wrenInitConfiguration(
    ffi.Pointer<WrenConfiguration> configuration,
  ) {
    return _wrenInitConfiguration(
      configuration,
    );
  }

  late final _wrenInitConfigurationPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<WrenConfiguration>)>>(
      'wrenInitConfiguration');
  late final _wrenInitConfiguration = _wrenInitConfigurationPtr
      .asFunction<void Function(ffi.Pointer<WrenConfiguration>)>();

  ffi.Pointer<WrenVM> wrenNewVM(
    ffi.Pointer<WrenConfiguration> configuration,
  ) {
    return _wrenNewVM(
      configuration,
    );
  }

  late final _wrenNewVMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WrenVM> Function(
              ffi.Pointer<WrenConfiguration>)>>('wrenNewVM');
  late final _wrenNewVM = _wrenNewVMPtr.asFunction<
      ffi.Pointer<WrenVM> Function(ffi.Pointer<WrenConfiguration>)>();

  void wrenFreeVM(
    ffi.Pointer<WrenVM> vm,
  ) {
    return _wrenFreeVM(
      vm,
    );
  }

  late final _wrenFreeVMPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WrenVM>)>>(
          'wrenFreeVM');
  late final _wrenFreeVM =
      _wrenFreeVMPtr.asFunction<void Function(ffi.Pointer<WrenVM>)>();

  void wrenCollectGarbage(
    ffi.Pointer<WrenVM> vm,
  ) {
    return _wrenCollectGarbage(
      vm,
    );
  }

  late final _wrenCollectGarbagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WrenVM>)>>(
          'wrenCollectGarbage');
  late final _wrenCollectGarbage =
      _wrenCollectGarbagePtr.asFunction<void Function(ffi.Pointer<WrenVM>)>();

  int wrenInterpret(
    ffi.Pointer<WrenVM> vm,
    ffi.Pointer<ffi.Char> module,
    ffi.Pointer<ffi.Char> source,
  ) {
    return _wrenInterpret(
      vm,
      module,
      source,
    );
  }

  late final _wrenInterpretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('wrenInterpret');
  late final _wrenInterpret = _wrenInterpretPtr.asFunction<
      int Function(
          ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<WrenHandle> wrenMakeCallHandle(
    ffi.Pointer<WrenVM> vm,
    ffi.Pointer<ffi.Char> signature,
  ) {
    return _wrenMakeCallHandle(
      vm,
      signature,
    );
  }

  late final _wrenMakeCallHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WrenHandle> Function(ffi.Pointer<WrenVM>,
              ffi.Pointer<ffi.Char>)>>('wrenMakeCallHandle');
  late final _wrenMakeCallHandle = _wrenMakeCallHandlePtr.asFunction<
      ffi.Pointer<WrenHandle> Function(
          ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>)>();

  int wrenCall(
    ffi.Pointer<WrenVM> vm,
    ffi.Pointer<WrenHandle> method,
  ) {
    return _wrenCall(
      vm,
      method,
    );
  }

  late final _wrenCallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<WrenVM>, ffi.Pointer<WrenHandle>)>>('wrenCall');
  late final _wrenCall = _wrenCallPtr
      .asFunction<int Function(ffi.Pointer<WrenVM>, ffi.Pointer<WrenHandle>)>();

  void wrenReleaseHandle(
    ffi.Pointer<WrenVM> vm,
    ffi.Pointer<WrenHandle> handle,
  ) {
    return _wrenReleaseHandle(
      vm,
      handle,
    );
  }

  late final _wrenReleaseHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>,
              ffi.Pointer<WrenHandle>)>>('wrenReleaseHandle');
  late final _wrenReleaseHandle = _wrenReleaseHandlePtr.asFunction<
      void Function(ffi.Pointer<WrenVM>, ffi.Pointer<WrenHandle>)>();

  int wrenGetSlotCount(
    ffi.Pointer<WrenVM> vm,
  ) {
    return _wrenGetSlotCount(
      vm,
    );
  }

  late final _wrenGetSlotCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WrenVM>)>>(
          'wrenGetSlotCount');
  late final _wrenGetSlotCount =
      _wrenGetSlotCountPtr.asFunction<int Function(ffi.Pointer<WrenVM>)>();

  void wrenEnsureSlots(
    ffi.Pointer<WrenVM> vm,
    int numSlots,
  ) {
    return _wrenEnsureSlots(
      vm,
      numSlots,
    );
  }

  late final _wrenEnsureSlotsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenEnsureSlots');
  late final _wrenEnsureSlots =
      _wrenEnsureSlotsPtr.asFunction<void Function(ffi.Pointer<WrenVM>, int)>();

  int wrenGetSlotType(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenGetSlotType(
      vm,
      slot,
    );
  }

  late final _wrenGetSlotTypePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenGetSlotType');
  late final _wrenGetSlotType =
      _wrenGetSlotTypePtr.asFunction<int Function(ffi.Pointer<WrenVM>, int)>();

  bool wrenGetSlotBool(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenGetSlotBool(
      vm,
      slot,
    );
  }

  late final _wrenGetSlotBoolPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenGetSlotBool');
  late final _wrenGetSlotBool =
      _wrenGetSlotBoolPtr.asFunction<bool Function(ffi.Pointer<WrenVM>, int)>();

  ffi.Pointer<ffi.Char> wrenGetSlotBytes(
    ffi.Pointer<WrenVM> vm,
    int slot,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _wrenGetSlotBytes(
      vm,
      slot,
      length,
    );
  }

  late final _wrenGetSlotBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<WrenVM>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('wrenGetSlotBytes');
  late final _wrenGetSlotBytes = _wrenGetSlotBytesPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<WrenVM>, int, ffi.Pointer<ffi.Int>)>();

  double wrenGetSlotDouble(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenGetSlotDouble(
      vm,
      slot,
    );
  }

  late final _wrenGetSlotDoublePtr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenGetSlotDouble');
  late final _wrenGetSlotDouble = _wrenGetSlotDoublePtr
      .asFunction<double Function(ffi.Pointer<WrenVM>, int)>();

  ffi.Pointer<ffi.Void> wrenGetSlotForeign(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenGetSlotForeign(
      vm,
      slot,
    );
  }

  late final _wrenGetSlotForeignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<WrenVM>, ffi.Int)>>('wrenGetSlotForeign');
  late final _wrenGetSlotForeign = _wrenGetSlotForeignPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<WrenVM>, int)>();

  ffi.Pointer<ffi.Char> wrenGetSlotString(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenGetSlotString(
      vm,
      slot,
    );
  }

  late final _wrenGetSlotStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<WrenVM>, ffi.Int)>>('wrenGetSlotString');
  late final _wrenGetSlotString = _wrenGetSlotStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<WrenVM>, int)>();

  ffi.Pointer<WrenHandle> wrenGetSlotHandle(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenGetSlotHandle(
      vm,
      slot,
    );
  }

  late final _wrenGetSlotHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WrenHandle> Function(
              ffi.Pointer<WrenVM>, ffi.Int)>>('wrenGetSlotHandle');
  late final _wrenGetSlotHandle = _wrenGetSlotHandlePtr
      .asFunction<ffi.Pointer<WrenHandle> Function(ffi.Pointer<WrenVM>, int)>();

  void wrenSetSlotBool(
    ffi.Pointer<WrenVM> vm,
    int slot,
    bool value,
  ) {
    return _wrenSetSlotBool(
      vm,
      slot,
      value,
    );
  }

  late final _wrenSetSlotBoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<WrenVM>, ffi.Int, ffi.Bool)>>('wrenSetSlotBool');
  late final _wrenSetSlotBool = _wrenSetSlotBoolPtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int, bool)>();

  void wrenSetSlotBytes(
    ffi.Pointer<WrenVM> vm,
    int slot,
    ffi.Pointer<ffi.Char> bytes,
    int length,
  ) {
    return _wrenSetSlotBytes(
      vm,
      slot,
      bytes,
      length,
    );
  }

  late final _wrenSetSlotBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('wrenSetSlotBytes');
  late final _wrenSetSlotBytes = _wrenSetSlotBytesPtr.asFunction<
      void Function(ffi.Pointer<WrenVM>, int, ffi.Pointer<ffi.Char>, int)>();

  void wrenSetSlotDouble(
    ffi.Pointer<WrenVM> vm,
    int slot,
    double value,
  ) {
    return _wrenSetSlotDouble(
      vm,
      slot,
      value,
    );
  }

  late final _wrenSetSlotDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<WrenVM>, ffi.Int, ffi.Double)>>('wrenSetSlotDouble');
  late final _wrenSetSlotDouble = _wrenSetSlotDoublePtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int, double)>();

  ffi.Pointer<ffi.Void> wrenSetSlotNewForeign(
    ffi.Pointer<WrenVM> vm,
    int slot,
    int classSlot,
    int size,
  ) {
    return _wrenSetSlotNewForeign(
      vm,
      slot,
      classSlot,
      size,
    );
  }

  late final _wrenSetSlotNewForeignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<WrenVM>, ffi.Int, ffi.Int,
              ffi.Size)>>('wrenSetSlotNewForeign');
  late final _wrenSetSlotNewForeign = _wrenSetSlotNewForeignPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<WrenVM>, int, int, int)>();

  void wrenSetSlotNewList(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenSetSlotNewList(
      vm,
      slot,
    );
  }

  late final _wrenSetSlotNewListPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenSetSlotNewList');
  late final _wrenSetSlotNewList = _wrenSetSlotNewListPtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int)>();

  void wrenSetSlotNewMap(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenSetSlotNewMap(
      vm,
      slot,
    );
  }

  late final _wrenSetSlotNewMapPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenSetSlotNewMap');
  late final _wrenSetSlotNewMap = _wrenSetSlotNewMapPtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int)>();

  void wrenSetSlotNull(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenSetSlotNull(
      vm,
      slot,
    );
  }

  late final _wrenSetSlotNullPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenSetSlotNull');
  late final _wrenSetSlotNull =
      _wrenSetSlotNullPtr.asFunction<void Function(ffi.Pointer<WrenVM>, int)>();

  void wrenSetSlotString(
    ffi.Pointer<WrenVM> vm,
    int slot,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _wrenSetSlotString(
      vm,
      slot,
      text,
    );
  }

  late final _wrenSetSlotStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('wrenSetSlotString');
  late final _wrenSetSlotString = _wrenSetSlotStringPtr.asFunction<
      void Function(ffi.Pointer<WrenVM>, int, ffi.Pointer<ffi.Char>)>();

  void wrenSetSlotHandle(
    ffi.Pointer<WrenVM> vm,
    int slot,
    ffi.Pointer<WrenHandle> handle,
  ) {
    return _wrenSetSlotHandle(
      vm,
      slot,
      handle,
    );
  }

  late final _wrenSetSlotHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int,
              ffi.Pointer<WrenHandle>)>>('wrenSetSlotHandle');
  late final _wrenSetSlotHandle = _wrenSetSlotHandlePtr.asFunction<
      void Function(ffi.Pointer<WrenVM>, int, ffi.Pointer<WrenHandle>)>();

  int wrenGetListCount(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenGetListCount(
      vm,
      slot,
    );
  }

  late final _wrenGetListCountPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenGetListCount');
  late final _wrenGetListCount =
      _wrenGetListCountPtr.asFunction<int Function(ffi.Pointer<WrenVM>, int)>();

  void wrenGetListElement(
    ffi.Pointer<WrenVM> vm,
    int listSlot,
    int index,
    int elementSlot,
  ) {
    return _wrenGetListElement(
      vm,
      listSlot,
      index,
      elementSlot,
    );
  }

  late final _wrenGetListElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int, ffi.Int,
              ffi.Int)>>('wrenGetListElement');
  late final _wrenGetListElement = _wrenGetListElementPtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int, int, int)>();

  void wrenSetListElement(
    ffi.Pointer<WrenVM> vm,
    int listSlot,
    int index,
    int elementSlot,
  ) {
    return _wrenSetListElement(
      vm,
      listSlot,
      index,
      elementSlot,
    );
  }

  late final _wrenSetListElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int, ffi.Int,
              ffi.Int)>>('wrenSetListElement');
  late final _wrenSetListElement = _wrenSetListElementPtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int, int, int)>();

  void wrenInsertInList(
    ffi.Pointer<WrenVM> vm,
    int listSlot,
    int index,
    int elementSlot,
  ) {
    return _wrenInsertInList(
      vm,
      listSlot,
      index,
      elementSlot,
    );
  }

  late final _wrenInsertInListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int, ffi.Int,
              ffi.Int)>>('wrenInsertInList');
  late final _wrenInsertInList = _wrenInsertInListPtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int, int, int)>();

  int wrenGetMapCount(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenGetMapCount(
      vm,
      slot,
    );
  }

  late final _wrenGetMapCountPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenGetMapCount');
  late final _wrenGetMapCount =
      _wrenGetMapCountPtr.asFunction<int Function(ffi.Pointer<WrenVM>, int)>();

  bool wrenGetMapContainsKey(
    ffi.Pointer<WrenVM> vm,
    int mapSlot,
    int keySlot,
  ) {
    return _wrenGetMapContainsKey(
      vm,
      mapSlot,
      keySlot,
    );
  }

  late final _wrenGetMapContainsKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<WrenVM>, ffi.Int, ffi.Int)>>('wrenGetMapContainsKey');
  late final _wrenGetMapContainsKey = _wrenGetMapContainsKeyPtr
      .asFunction<bool Function(ffi.Pointer<WrenVM>, int, int)>();

  void wrenGetMapValue(
    ffi.Pointer<WrenVM> vm,
    int mapSlot,
    int keySlot,
    int valueSlot,
  ) {
    return _wrenGetMapValue(
      vm,
      mapSlot,
      keySlot,
      valueSlot,
    );
  }

  late final _wrenGetMapValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int, ffi.Int,
              ffi.Int)>>('wrenGetMapValue');
  late final _wrenGetMapValue = _wrenGetMapValuePtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int, int, int)>();

  void wrenSetMapValue(
    ffi.Pointer<WrenVM> vm,
    int mapSlot,
    int keySlot,
    int valueSlot,
  ) {
    return _wrenSetMapValue(
      vm,
      mapSlot,
      keySlot,
      valueSlot,
    );
  }

  late final _wrenSetMapValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int, ffi.Int,
              ffi.Int)>>('wrenSetMapValue');
  late final _wrenSetMapValue = _wrenSetMapValuePtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int, int, int)>();

  void wrenRemoveMapValue(
    ffi.Pointer<WrenVM> vm,
    int mapSlot,
    int keySlot,
    int removedValueSlot,
  ) {
    return _wrenRemoveMapValue(
      vm,
      mapSlot,
      keySlot,
      removedValueSlot,
    );
  }

  late final _wrenRemoveMapValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int, ffi.Int,
              ffi.Int)>>('wrenRemoveMapValue');
  late final _wrenRemoveMapValue = _wrenRemoveMapValuePtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, int, int, int)>();

  void wrenGetVariable(
    ffi.Pointer<WrenVM> vm,
    ffi.Pointer<ffi.Char> module,
    ffi.Pointer<ffi.Char> name,
    int slot,
  ) {
    return _wrenGetVariable(
      vm,
      module,
      name,
      slot,
    );
  }

  late final _wrenGetVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('wrenGetVariable');
  late final _wrenGetVariable = _wrenGetVariablePtr.asFunction<
      void Function(ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  bool wrenHasVariable(
    ffi.Pointer<WrenVM> vm,
    ffi.Pointer<ffi.Char> module,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _wrenHasVariable(
      vm,
      module,
      name,
    );
  }

  late final _wrenHasVariablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('wrenHasVariable');
  late final _wrenHasVariable = _wrenHasVariablePtr.asFunction<
      bool Function(
          ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool wrenHasModule(
    ffi.Pointer<WrenVM> vm,
    ffi.Pointer<ffi.Char> module,
  ) {
    return _wrenHasModule(
      vm,
      module,
    );
  }

  late final _wrenHasModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>)>>('wrenHasModule');
  late final _wrenHasModule = _wrenHasModulePtr
      .asFunction<bool Function(ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Char>)>();

  void wrenAbortFiber(
    ffi.Pointer<WrenVM> vm,
    int slot,
  ) {
    return _wrenAbortFiber(
      vm,
      slot,
    );
  }

  late final _wrenAbortFiberPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WrenVM>, ffi.Int)>>(
      'wrenAbortFiber');
  late final _wrenAbortFiber =
      _wrenAbortFiberPtr.asFunction<void Function(ffi.Pointer<WrenVM>, int)>();

  ffi.Pointer<ffi.Void> wrenGetUserData(
    ffi.Pointer<WrenVM> vm,
  ) {
    return _wrenGetUserData(
      vm,
    );
  }

  late final _wrenGetUserDataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<WrenVM>)>>(
      'wrenGetUserData');
  late final _wrenGetUserData = _wrenGetUserDataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<WrenVM>)>();

  void wrenSetUserData(
    ffi.Pointer<WrenVM> vm,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _wrenSetUserData(
      vm,
      userData,
    );
  }

  late final _wrenSetUserDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Void>)>>('wrenSetUserData');
  late final _wrenSetUserData = _wrenSetUserDataPtr
      .asFunction<void Function(ffi.Pointer<WrenVM>, ffi.Pointer<ffi.Void>)>();
}

final class WrenVM extends ffi.Opaque {}

final class WrenHandle extends ffi.Opaque {}

final class WrenLoadModuleResult extends ffi.Struct {
  external ffi.Pointer<ffi.Char> source;

  external WrenLoadModuleCompleteFn onComplete;

  external ffi.Pointer<ffi.Void> userData;
}

typedef WrenLoadModuleCompleteFn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<WrenVM> vm, ffi.Pointer<ffi.Char> name,
            WrenLoadModuleResult result)>>;

abstract class WrenErrorType {
  static const int WREN_ERROR_COMPILE = 0;
  static const int WREN_ERROR_RUNTIME = 1;
  static const int WREN_ERROR_STACK_TRACE = 2;
}

final class WrenForeignClassMethods extends ffi.Struct {
  external WrenForeignMethodFn allocate;

  external WrenFinalizerFn finalize;
}

typedef WrenForeignMethodFn = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WrenVM> vm)>>;
typedef WrenFinalizerFn = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> data)>>;

final class WrenConfiguration extends ffi.Struct {
  external WrenReallocateFn reallocateFn;

  external WrenResolveModuleFn resolveModuleFn;

  external WrenLoadModuleFn loadModuleFn;

  external WrenBindForeignMethodFn bindForeignMethodFn;

  external WrenBindForeignClassFn bindForeignClassFn;

  external WrenWriteFn writeFn;

  external WrenErrorFn errorFn;

  @ffi.Size()
  external int initialHeapSize;

  @ffi.Size()
  external int minHeapSize;

  @ffi.Int()
  external int heapGrowthPercent;

  external ffi.Pointer<ffi.Void> userData;
}

typedef WrenReallocateFn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> memory,
            ffi.Size newSize, ffi.Pointer<ffi.Void> userData)>>;
typedef WrenResolveModuleFn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<WrenVM> vm,
            ffi.Pointer<ffi.Char> importer, ffi.Pointer<ffi.Char> name)>>;
typedef WrenLoadModuleFn = ffi.Pointer<
    ffi.NativeFunction<
        WrenLoadModuleResult Function(
            ffi.Pointer<WrenVM> vm, ffi.Pointer<ffi.Char> name)>>;
typedef WrenBindForeignMethodFn = ffi.Pointer<
    ffi.NativeFunction<
        WrenForeignMethodFn Function(
            ffi.Pointer<WrenVM> vm,
            ffi.Pointer<ffi.Char> module,
            ffi.Pointer<ffi.Char> className,
            ffi.Bool isStatic,
            ffi.Pointer<ffi.Char> signature)>>;
typedef WrenBindForeignClassFn = ffi.Pointer<
    ffi.NativeFunction<
        WrenForeignClassMethods Function(ffi.Pointer<WrenVM> vm,
            ffi.Pointer<ffi.Char> module, ffi.Pointer<ffi.Char> className)>>;
typedef WrenWriteFn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<WrenVM> vm, ffi.Pointer<ffi.Char> text)>>;
typedef WrenErrorFn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<WrenVM> vm,
            ffi.Int32 type,
            ffi.Pointer<ffi.Char> module,
            ffi.Int line,
            ffi.Pointer<ffi.Char> message)>>;

abstract class WrenInterpretResult {
  static const int WREN_RESULT_SUCCESS = 0;
  static const int WREN_RESULT_COMPILE_ERROR = 1;
  static const int WREN_RESULT_RUNTIME_ERROR = 2;
}

abstract class WrenType {
  static const int WREN_TYPE_BOOL = 0;
  static const int WREN_TYPE_NUM = 1;
  static const int WREN_TYPE_FOREIGN = 2;
  static const int WREN_TYPE_LIST = 3;
  static const int WREN_TYPE_MAP = 4;
  static const int WREN_TYPE_NULL = 5;
  static const int WREN_TYPE_STRING = 6;
  static const int WREN_TYPE_UNKNOWN = 7;
}

const int __bool_true_false_are_defined = 1;

const int false1 = 0;

const int true1 = 1;

const int WREN_VERSION_MAJOR = 0;

const int WREN_VERSION_MINOR = 4;

const int WREN_VERSION_PATCH = 0;

const String WREN_VERSION_STRING = '0.4.0';

const int WREN_VERSION_NUMBER = 4000;
